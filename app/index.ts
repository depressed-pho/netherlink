import 'foundation-sites';
import $ = require('jquery');
import { WorldEditorModel } from './model/world-editor';
import { WorldSelectorModel } from './model/world-selector';
import { overworld, nether } from 'netherlink/dimension';
import { NLStorage } from 'netherlink/storage';
import * as LocalStorage from 'netherlink/storage/local';
import * as Alert from './view/alert';
import { WorldSelectorView } from './view/world-selector';
import { PortalListView } from './view/portal-list';
import { AtlasView } from './view/atlas';
import { CoordsInfoView } from './view/coords-info';
import htmlWhatsThis from '../assets/whats-this.html';
import htmlHowToUse from '../assets/how-to-use.html';
import htmlChanges from "../assets/changes.html";
import htmlNews from "../NEWS.md";

window.addEventListener('DOMContentLoaded', (ev) => {
    const storage: NLStorage = LocalStorage.instance;

    if (!storage.isAvailable) {
        Alert.show(
            "warning", "Cannot save changes",
            "Your browser doesn't seem to allow web applications to save their " +
                "data in its local storage, possibly because it's in a private mode. " +
                "Any changes you make will be lost.");
    }

    const body = document.querySelector("body")! as HTMLBodyElement;
    body.insertAdjacentHTML("beforeend", htmlWhatsThis);
    body.insertAdjacentHTML("beforeend", htmlHowToUse);
    body.insertAdjacentHTML("beforeend", htmlChanges);

    const modalChanges = document.getElementById("modalChanges")! as HTMLDivElement;
    modalChanges.insertAdjacentHTML("beforeend", htmlNews);

    $(document).foundation();

    /* We don't use data-open="" because it doesn't invoke
     * .preventDefault() */
    const aWhatsThis = document.querySelector("a[data-for='modalWhatsThis']")!;
    aWhatsThis.addEventListener("click", ev => {
        ev.preventDefault();
        $("#modalWhatsThis").foundation("open");
    });

    const aHowToUse = document.querySelector("a[data-for='modalHowToUse']")!;
    aHowToUse.addEventListener("click", ev => {
        ev.preventDefault();
        $("#modalHowToUse").foundation("open");
    });

    const aChanges = document.querySelector("a[data-for='modalChanges']")!;
    aChanges.addEventListener("click", ev => {
        ev.preventDefault();
        $("#modalChanges").foundation("open");
    });

    const worldSelM = new WorldSelectorModel(storage);
    const worldSelV = new WorldSelectorView(worldSelM);

    const worldEditM = new WorldEditorModel(worldSelM);
    const owPortalsV = new PortalListView(overworld, worldEditM);
    const ntPortalsV = new PortalListView(nether, worldEditM);
    attach('portalsInOverworld', owPortalsV.fragment);
    attach('portalsInNether', ntPortalsV.fragment);
    const owAtlasV   = new AtlasView(overworld, worldEditM);
    const ntAtlasV   = new AtlasView(nether, worldEditM);
    attach('atlasInOverworld', owAtlasV.fragment);
    attach('atlasInNether', ntAtlasV.fragment);
    const owCoordsV  = new CoordsInfoView(overworld, worldEditM);
    const ntCoordsV  = new CoordsInfoView(nether, worldEditM);
    attach('coordsInOverworld', owCoordsV.fragment);
    attach('coordsInNether', ntCoordsV.fragment);

    /* Trigger the resize event manually in order to resize atlases. */
    window.dispatchEvent(new UIEvent("resize"));
});

function attach(id: string, frag: DocumentFragment) {
    const parent = document.getElementById(id)!;
    parent.appendChild(frag);
}

/* Install a service worker (generated by workbox-webpack-plugin) to
 * enable offline-mode caching. */
if ('serviceWorker' in navigator) {
    window.addEventListener('load', async () => {
        try {
            const registration = await navigator.serviceWorker.register('service-worker.js');
            console.log('Service worker registered: ', registration);
        }
        catch (e) {
            console.log('Service worker registration failed: ', e);
        }
    });
}
